/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/js/dbhelper.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/idb/lib/idb.js":
/*!*************************************!*\
  !*** ./node_modules/idb/lib/idb.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n(function() {\n  function toArray(arr) {\n    return Array.prototype.slice.call(arr);\n  }\n\n  function promisifyRequest(request) {\n    return new Promise(function(resolve, reject) {\n      request.onsuccess = function() {\n        resolve(request.result);\n      };\n\n      request.onerror = function() {\n        reject(request.error);\n      };\n    });\n  }\n\n  function promisifyRequestCall(obj, method, args) {\n    var request;\n    var p = new Promise(function(resolve, reject) {\n      request = obj[method].apply(obj, args);\n      promisifyRequest(request).then(resolve, reject);\n    });\n\n    p.request = request;\n    return p;\n  }\n\n  function promisifyCursorRequestCall(obj, method, args) {\n    var p = promisifyRequestCall(obj, method, args);\n    return p.then(function(value) {\n      if (!value) return;\n      return new Cursor(value, p.request);\n    });\n  }\n\n  function proxyProperties(ProxyClass, targetProp, properties) {\n    properties.forEach(function(prop) {\n      Object.defineProperty(ProxyClass.prototype, prop, {\n        get: function() {\n          return this[targetProp][prop];\n        },\n        set: function(val) {\n          this[targetProp][prop] = val;\n        }\n      });\n    });\n  }\n\n  function proxyRequestMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return promisifyRequestCall(this[targetProp], prop, arguments);\n      };\n    });\n  }\n\n  function proxyMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return this[targetProp][prop].apply(this[targetProp], arguments);\n      };\n    });\n  }\n\n  function proxyCursorRequestMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return promisifyCursorRequestCall(this[targetProp], prop, arguments);\n      };\n    });\n  }\n\n  function Index(index) {\n    this._index = index;\n  }\n\n  proxyProperties(Index, '_index', [\n    'name',\n    'keyPath',\n    'multiEntry',\n    'unique'\n  ]);\n\n  proxyRequestMethods(Index, '_index', IDBIndex, [\n    'get',\n    'getKey',\n    'getAll',\n    'getAllKeys',\n    'count'\n  ]);\n\n  proxyCursorRequestMethods(Index, '_index', IDBIndex, [\n    'openCursor',\n    'openKeyCursor'\n  ]);\n\n  function Cursor(cursor, request) {\n    this._cursor = cursor;\n    this._request = request;\n  }\n\n  proxyProperties(Cursor, '_cursor', [\n    'direction',\n    'key',\n    'primaryKey',\n    'value'\n  ]);\n\n  proxyRequestMethods(Cursor, '_cursor', IDBCursor, [\n    'update',\n    'delete'\n  ]);\n\n  // proxy 'next' methods\n  ['advance', 'continue', 'continuePrimaryKey'].forEach(function(methodName) {\n    if (!(methodName in IDBCursor.prototype)) return;\n    Cursor.prototype[methodName] = function() {\n      var cursor = this;\n      var args = arguments;\n      return Promise.resolve().then(function() {\n        cursor._cursor[methodName].apply(cursor._cursor, args);\n        return promisifyRequest(cursor._request).then(function(value) {\n          if (!value) return;\n          return new Cursor(value, cursor._request);\n        });\n      });\n    };\n  });\n\n  function ObjectStore(store) {\n    this._store = store;\n  }\n\n  ObjectStore.prototype.createIndex = function() {\n    return new Index(this._store.createIndex.apply(this._store, arguments));\n  };\n\n  ObjectStore.prototype.index = function() {\n    return new Index(this._store.index.apply(this._store, arguments));\n  };\n\n  proxyProperties(ObjectStore, '_store', [\n    'name',\n    'keyPath',\n    'indexNames',\n    'autoIncrement'\n  ]);\n\n  proxyRequestMethods(ObjectStore, '_store', IDBObjectStore, [\n    'put',\n    'add',\n    'delete',\n    'clear',\n    'get',\n    'getAll',\n    'getKey',\n    'getAllKeys',\n    'count'\n  ]);\n\n  proxyCursorRequestMethods(ObjectStore, '_store', IDBObjectStore, [\n    'openCursor',\n    'openKeyCursor'\n  ]);\n\n  proxyMethods(ObjectStore, '_store', IDBObjectStore, [\n    'deleteIndex'\n  ]);\n\n  function Transaction(idbTransaction) {\n    this._tx = idbTransaction;\n    this.complete = new Promise(function(resolve, reject) {\n      idbTransaction.oncomplete = function() {\n        resolve();\n      };\n      idbTransaction.onerror = function() {\n        reject(idbTransaction.error);\n      };\n      idbTransaction.onabort = function() {\n        reject(idbTransaction.error);\n      };\n    });\n  }\n\n  Transaction.prototype.objectStore = function() {\n    return new ObjectStore(this._tx.objectStore.apply(this._tx, arguments));\n  };\n\n  proxyProperties(Transaction, '_tx', [\n    'objectStoreNames',\n    'mode'\n  ]);\n\n  proxyMethods(Transaction, '_tx', IDBTransaction, [\n    'abort'\n  ]);\n\n  function UpgradeDB(db, oldVersion, transaction) {\n    this._db = db;\n    this.oldVersion = oldVersion;\n    this.transaction = new Transaction(transaction);\n  }\n\n  UpgradeDB.prototype.createObjectStore = function() {\n    return new ObjectStore(this._db.createObjectStore.apply(this._db, arguments));\n  };\n\n  proxyProperties(UpgradeDB, '_db', [\n    'name',\n    'version',\n    'objectStoreNames'\n  ]);\n\n  proxyMethods(UpgradeDB, '_db', IDBDatabase, [\n    'deleteObjectStore',\n    'close'\n  ]);\n\n  function DB(db) {\n    this._db = db;\n  }\n\n  DB.prototype.transaction = function() {\n    return new Transaction(this._db.transaction.apply(this._db, arguments));\n  };\n\n  proxyProperties(DB, '_db', [\n    'name',\n    'version',\n    'objectStoreNames'\n  ]);\n\n  proxyMethods(DB, '_db', IDBDatabase, [\n    'close'\n  ]);\n\n  // Add cursor iterators\n  // TODO: remove this once browsers do the right thing with promises\n  ['openCursor', 'openKeyCursor'].forEach(function(funcName) {\n    [ObjectStore, Index].forEach(function(Constructor) {\n      Constructor.prototype[funcName.replace('open', 'iterate')] = function() {\n        var args = toArray(arguments);\n        var callback = args[args.length - 1];\n        var nativeObject = this._store || this._index;\n        var request = nativeObject[funcName].apply(nativeObject, args.slice(0, -1));\n        request.onsuccess = function() {\n          callback(request.result);\n        };\n      };\n    });\n  });\n\n  // polyfill getAll\n  [Index, ObjectStore].forEach(function(Constructor) {\n    if (Constructor.prototype.getAll) return;\n    Constructor.prototype.getAll = function(query, count) {\n      var instance = this;\n      var items = [];\n\n      return new Promise(function(resolve) {\n        instance.iterateCursor(query, function(cursor) {\n          if (!cursor) {\n            resolve(items);\n            return;\n          }\n          items.push(cursor.value);\n\n          if (count !== undefined && items.length == count) {\n            resolve(items);\n            return;\n          }\n          cursor.continue();\n        });\n      });\n    };\n  });\n\n  var exp = {\n    open: function(name, version, upgradeCallback) {\n      var p = promisifyRequestCall(indexedDB, 'open', [name, version]);\n      var request = p.request;\n\n      request.onupgradeneeded = function(event) {\n        if (upgradeCallback) {\n          upgradeCallback(new UpgradeDB(request.result, event.oldVersion, request.transaction));\n        }\n      };\n\n      return p.then(function(db) {\n        return new DB(db);\n      });\n    },\n    delete: function(name) {\n      return promisifyRequestCall(indexedDB, 'deleteDatabase', [name]);\n    }\n  };\n\n  if (true) {\n    module.exports = exp;\n    module.exports.default = module.exports;\n  }\n  else {}\n}());\n\n\n//# sourceURL=webpack:///./node_modules/idb/lib/idb.js?");

/***/ }),

/***/ "./src/js/dbhelper.js":
/*!****************************!*\
  !*** ./src/js/dbhelper.js ***!
  \****************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return DBHelper; });\n/* harmony import */ var idb__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! idb */ \"./node_modules/idb/lib/idb.js\");\n/* harmony import */ var idb__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(idb__WEBPACK_IMPORTED_MODULE_0__);\n\n/**\r\n * Common database helper functions.\r\n */\nclass DBHelper {\n\n  /**\r\n   * Database URL.\r\n   * Change this to restaurants.json file location on your server.\r\n   */\n  static get DATABASE_URL() {\n    const port = 1337; // Change this to your server port\n    return `http://localhost:${port}`;\n  }\n\n  /**\r\n   * Create idb with store and return a promise\r\n   */\n  static idbPromise() {\n    const dbPromise = idb__WEBPACK_IMPORTED_MODULE_0___default.a.open('restaurants-db', 1, upgradeDB => {\n\n      switch (upgradeDB.oldVersion) {\n        case 0:\n          const restaurantsStore = upgradeDB.createObjectStore('restaurants', { keyPath: 'id' });\n          restaurantsStore.createIndex('updated', 'updatedAt');\n        case 1:\n          const reviewsStore = upgradeDB.createObjectStore('reviews', { keyPath: 'id' });\n          reviewsStore.createIndex('restaurant', 'restaurant_id');\n        case 2:\n          const reviewsOfflineStore = upgradeDB.createObjectStore('offline-reviews', { keyPath: 'updatedAt' });\n          reviewsOfflineStore.createIndex('restaurant', 'restaurant_id');\n        case 3:\n          upgradeDB.createObjectStore('offline-fav', { keyPath: 'restaurant_id' });\n        // favOfflineStore.createIndex('restaurant', 'restaurant_id');\n      }\n    });\n    return dbPromise;\n  }\n\n  /**\r\n   * Favorite/unfavorite restaurant in idb\r\n   */\n  static favRestauraurantInIDB(restaurant_id, is_favorite) {\n    is_favorite === 'true' ? is_favorite = 'false' : is_favorite = 'true';\n    const dbPromise = DBHelper.idbPromise();\n    dbPromise.then(db => {\n      const restaurantsStore = db.transaction('restaurants', 'readwrite').objectStore('restaurants');\n      console.log('id:', restaurant_id);\n      restaurantsStore.get(Number(restaurant_id)).then(restaurant => {\n        if (restaurant) {\n          restaurant.is_favorite = is_favorite;\n          console.log({ is_favorite });\n          console.log(typeof is_favorite);\n          console.log('restaurant:', restaurant);\n          console.log('favorited?', restaurant.is_favorite);\n          restaurantsStore.put(restaurant);\n\n          //if offline store for the sync\n          if (!navigator.onLine) {\n            console.log('Offline: store favs for the future sync');\n            let offlineFav = {\n              restaurant_id: restaurant.id,\n              is_favorite: restaurant.is_favorite\n            };\n            const favOfflineStore = db.transaction('offline-fav', 'readwrite').objectStore('offline-fav');\n            favOfflineStore.put(offlineFav);\n          }\n          console.log('Restaurant is_favorite updated in idb');\n        } else {\n          console.log('No restaurant in idb');\n        }\n      });\n    });\n  }\n\n  /**\r\n   * Cache response from server\r\n   */\n  static cacheResonse(restaurants) {\n    // add restaurants to idb\n    const dbPromise = DBHelper.idbPromise();\n    dbPromise.then(db => {\n      const tx = db.transaction('restaurants', 'readwrite');\n      const restaurantsStore = tx.objectStore('restaurants');\n\n      restaurants.forEach(restaurant => {\n        restaurantsStore.put(restaurant);\n      });\n\n      return tx.complete;\n    }).then(function () {\n      console.log('Restaurants cached in idb');\n    });\n  }\n\n  /**\r\n   * Fetch all restaurants.\r\n   */\n  static fetchRestaurantsFromIDB(callback) {\n    const dbPromise = DBHelper.idbPromise();\n    dbPromise.then(db => {\n      const restaurantsStore = db.transaction('restaurants').objectStore('restaurants').index('updated');\n      restaurantsStore.getAll().then(restaurants => {\n        if (restaurants.length != 0) {\n          callback(null, restaurants);\n        } else {\n          callback('No restaurants in idb', null);\n        }\n      });\n    });\n  }\n\n  static fetchRestaurants(callback) {\n    DBHelper.fetchRestaurantsFromIDB((error, restaurants) => {\n      if (error) {\n        // Got an error\n        fetch(`${DBHelper.DATABASE_URL}/restaurants`).then(response => response.json()).then(restaurants => {\n          console.log('No cached idb, fetched from Internet');\n          DBHelper.cacheResonse(restaurants);\n          callback(null, restaurants);\n        }).catch(error => console.log('Fetch Error:', error));\n      } else {\n        console.log('Fetched from cached idb');\n        callback(null, restaurants);\n      }\n    });\n  }\n\n  /**\r\n   * Fetch a restaurant by its ID.\r\n   */\n  static fetchRestaurantByIdFromIDB(id, callback) {\n    const dbPromise = DBHelper.idbPromise();\n    dbPromise.then(db => {\n      const restaurantsStore = db.transaction('restaurants').objectStore('restaurants');\n      console.log('id:', id);\n      restaurantsStore.get(Number(id)).then(restaurant => {\n        if (restaurant) {\n          console.log('restaurant:', restaurant);\n          callback(null, restaurant);\n        } else {\n          callback('No restaurant in idb', null);\n        }\n      });\n    });\n  }\n  static fetchRestaurantById(id, callback) {\n    DBHelper.fetchRestaurantByIdFromIDB(id, (error, restaurant) => {\n      if (error) {\n        // Got an error\n        fetch(`${DBHelper.DATABASE_URL}/restaurants/${id}`).then(response => response.json()).then(restaurant => {\n          console.log('No cached idb, fetched from Internet');\n          callback(null, restaurant);\n        }).catch(error => callback('No such restaurant in db', null));\n      } else {\n        console.log('Fetched from cached idb');\n        callback(null, restaurant);\n      }\n    });\n  }\n\n  /**\r\n   * Fetch a reviews by restaurant ID from IDB.\r\n   */\n  static fetchReviewsByRestaurantIdFromIDB(id, callback) {\n    let offReviews = [];\n    // getting offline reviews if any\n    DBHelper.getOfflineReviews(id, (error, offlineReviews) => {\n      if (error) {\n        console.log(error);\n      } else {\n        offReviews = offlineReviews;\n        console.log('Offline reviews:', offReviews);\n      }\n    });\n\n    const dbPromise = DBHelper.idbPromise();\n    dbPromise.then(db => {\n      const reviewsStore = db.transaction('reviews').objectStore('reviews');\n      console.log('id:', id);\n      let myIndex = reviewsStore.index('restaurant');\n      // double query to idb because of inconsistency of the API (existent reviews with restaurant_id in number just added review returns with restaurant_id in string)\n      myIndex.getAll(Number(id)).then(dbReviews => {\n        console.log({ dbReviews });\n        myIndex.getAll(id.toString()).then(newReviews => {\n          console.log({ newReviews });\n          if (offReviews.length != 0 | dbReviews.length != 0 || newReviews.length != 0) {\n            let mergeReviews = [];\n            if (dbReviews.length != 0) {\n              dbReviews.forEach(dbReview => {\n                mergeReviews.push(dbReview);\n              });\n            }\n            if (newReviews.length != 0) {\n              newReviews.forEach(newReview => {\n                mergeReviews.push(newReview);\n              });\n            }\n            if (offReviews.length != 0) {\n              offReviews.forEach(offReview => {\n                mergeReviews.push(offReview);\n              });\n            }\n            console.log('Reviews from IDB (new, old, offline) for this restaurant:', mergeReviews);\n            callback(null, mergeReviews);\n          } else {\n            callback('No reviews in idb for this restaurant', null);\n          }\n        });\n      });\n    });\n  }\n\n  /**\r\n   * Fetch reviews by restaurant ID.\r\n   */\n  static fetchReviewsByRestaurantId(id, callback) {\n    fetch(`${DBHelper.DATABASE_URL}/reviews/?restaurant_id=${id}`).then(response => response.json()).then(reviews => {\n      DBHelper.cacheRestaurantReviewsInIDB(reviews);\n      console.log('No reviews in cached idb, reviews fetched from Internet');\n      callback(null, reviews);\n    }).catch(error => {\n      DBHelper.fetchReviewsByRestaurantIdFromIDB(id, (error, cachedReviews) => {\n        if (error) {\n          // Got an error\n          callback('No reviews for this restaurant in db and idb', null);\n        } else {\n          console.log('Reviews for this restaurant fetched from cached idb (with offline reviews if there are exists)', cachedReviews);\n          callback(null, cachedReviews);\n        }\n      });\n    });\n  }\n\n  /**\r\n   * Cache restaurant reviews in IDB\r\n   */\n  static cacheRestaurantReviewsInIDB(reviews) {\n    const dbPromise = DBHelper.idbPromise();\n    dbPromise.then(db => {\n      const reviewsStore = db.transaction('reviews', 'readwrite').objectStore('reviews');\n      reviews.forEach(review => reviewsStore.put(review));\n      console.info('Reviews cached in idb');\n    });\n  }\n  /**\r\n   * Add review in idb for offline sync\r\n   */\n  static saveReviewToIDBforSync(review) {\n    const dbPromise = DBHelper.idbPromise();\n    dbPromise.then(db => {\n      const reviewsOfflineStore = db.transaction('offline-reviews', 'readwrite').objectStore('offline-reviews');\n      reviewsOfflineStore.put(review);\n    });\n  }\n  /**\r\n   * Add review in idb for offline sync\r\n   */\n  static addReviewToServer(review) {\n    fetch(`${DBHelper.DATABASE_URL}/reviews/?restaurant_id=${review.restaurant_id}`, {\n      method: 'POST',\n      body: JSON.stringify(review)\n    }).then(response => {\n      response.json().then(data => {\n        console.log('Review added to the server:', data);\n        const dbPromise = DBHelper.idbPromise();\n        dbPromise.then(db => {\n          const reviewsOfflineStore = db.transaction('reviews', 'readwrite').objectStore('reviews');\n          reviewsOfflineStore.put(data);\n        });\n      });\n    }).catch(error => console.error(`Fetch Error =\\n`, error));\n  }\n\n  static getOfflineReviews(id, callback) {\n    const dbPromise = DBHelper.idbPromise();\n    dbPromise.then(db => {\n      const offlineReviewsStore = db.transaction('offline-reviews', 'readwrite').objectStore('offline-reviews').index('restaurant');\n      offlineReviewsStore.getAll(Number(id)).then(offlineReviews => {\n        if (offlineReviews.length != 0) {\n          callback(null, offlineReviews);\n        } else {\n          callback('No reviews for sync in offline store', null);\n        }\n      });\n    });\n  }\n  /**\r\n   * Get reviews from idb that have added dyring offline mode\r\n   */\n  static getOfflineReviewsAndClearIDB() {\n    const dbPromise = DBHelper.idbPromise();\n    dbPromise.then(db => {\n      const offlineReviewsStore = db.transaction('offline-reviews', 'readwrite').objectStore('offline-reviews');\n      offlineReviewsStore.getAll().then(offlineReviews => {\n        if (offlineReviews.length != 0) {\n          DBHelper.fetchOfflineReviewsToServer(offlineReviews);\n          offlineReviewsStore.clear();\n          console.log('All offline reviews fetched to server, storage cleared');\n          if (Notification.permission === \"granted\") {\n            let notification = new Notification(\"All data has synced to server\");\n          }\n        } else {\n          console.log('No reviews for sync in offline store');\n        }\n      });\n    });\n  }\n\n  static fetchOfflineReviewsToServer(offlineReviews) {\n    offlineReviews.forEach(offlineReview => {\n      DBHelper.addReviewToServer(offlineReview);\n    });\n  }\n\n  /**\r\n   * Get favs from idb that have added dyring offline mode\r\n   */\n  static getOfflineFavsAndClearIDB() {\n    const dbPromise = DBHelper.idbPromise();\n    dbPromise.then(db => {\n      const offlineFavsStore = db.transaction('offline-fav', 'readwrite').objectStore('offline-fav');\n      offlineFavsStore.getAll().then(offlineFavs => {\n        if (offlineFavs.length != 0) {\n          DBHelper.fetchOfflineFavsToServer(offlineFavs);\n          offlineFavsStore.clear();\n          console.log('All offline favs fetched to server, storage cleared');\n          if (Notification.permission === \"granted\") {\n            let notification = new Notification(\"All data has synced to server\");\n          }\n        } else {\n          console.log('No favs for sync in offline store');\n        }\n      });\n    });\n  }\n\n  static fetchOfflineFavsToServer(offlineFavs) {\n    offlineFavs.forEach(offlineFav => {\n      let is_favorite = offlineFav.is_favorite;\n      is_favorite === 'true' ? is_favorite = 'false' : is_favorite = 'true';\n      console.log({ offlineFav });\n\n      DBHelper.addToFavorites(offlineFav.restaurant_id, is_favorite);\n    });\n  }\n\n  /**\r\n   * Fetch restaurants by a cuisine type with proper error handling.\r\n   */\n  static fetchRestaurantByCuisine(cuisine, callback) {\n    // Fetch all restaurants  with proper error handling\n    DBHelper.fetchRestaurants((error, restaurants) => {\n      if (error) {\n        callback(error, null);\n      } else {\n        // Filter restaurants to have only given cuisine type\n        const results = restaurants.filter(r => r.cuisine_type == cuisine);\n        callback(null, results);\n      }\n    });\n  }\n\n  /**\r\n   * Fetch restaurants by a neighborhood with proper error handling.\r\n   */\n  static fetchRestaurantByNeighborhood(neighborhood, callback) {\n    // Fetch all restaurants\n    DBHelper.fetchRestaurants((error, restaurants) => {\n      if (error) {\n        callback(error, null);\n      } else {\n        // Filter restaurants to have only given neighborhood\n        const results = restaurants.filter(r => r.neighborhood == neighborhood);\n        callback(null, results);\n      }\n    });\n  }\n\n  /**\r\n   * Fetch restaurants by a cuisine and a neighborhood with proper error handling.\r\n   */\n  static fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, callback) {\n    // Fetch all restaurants\n    DBHelper.fetchRestaurants((error, restaurants) => {\n      if (error) {\n        callback(error, null);\n      } else {\n        let results = restaurants;\n        if (cuisine != 'all') {\n          // filter by cuisine\n          results = results.filter(r => r.cuisine_type == cuisine);\n        }\n        if (neighborhood != 'all') {\n          // filter by neighborhood\n          results = results.filter(r => r.neighborhood == neighborhood);\n        }\n        callback(null, results);\n      }\n    });\n  }\n\n  /**\r\n   * Fetch all neighborhoods with proper error handling.\r\n   */\n  static fetchNeighborhoods(callback) {\n    // Fetch all restaurants\n    DBHelper.fetchRestaurants((error, restaurants) => {\n      if (error) {\n        callback(error, null);\n      } else {\n        // Get all neighborhoods from all restaurants\n        const neighborhoods = restaurants.map((v, i) => restaurants[i].neighborhood);\n        // Remove duplicates from neighborhoods\n        const uniqueNeighborhoods = neighborhoods.filter((v, i) => neighborhoods.indexOf(v) == i);\n        callback(null, uniqueNeighborhoods);\n      }\n    });\n  }\n\n  /**\r\n   * Fetch all cuisines with proper error handling.\r\n   */\n  static fetchCuisines(callback) {\n    // Fetch all restaurants\n    DBHelper.fetchRestaurants((error, restaurants) => {\n      if (error) {\n        callback(error, null);\n      } else {\n        // Get all cuisines from all restaurants\n        const cuisines = restaurants.map((v, i) => restaurants[i].cuisine_type);\n        // Remove duplicates from cuisines\n        const uniqueCuisines = cuisines.filter((v, i) => cuisines.indexOf(v) == i);\n        callback(null, uniqueCuisines);\n      }\n    });\n  }\n\n  /**\r\n   * Restaurant page URL.\r\n   */\n  static urlForRestaurant(restaurant) {\n    return `./restaurant.html?id=${restaurant.id}`;\n  }\n\n  /**\r\n   * Restaurant image URL.\r\n   */\n  static imageUrlForRestaurant(restaurant) {\n    const path = '/img/';\n    return `${path}${restaurant.photograph}`;\n  }\n\n  /**\r\n   * Add to/remove restaurant from favorites\r\n   */\n  static addToFavorites(restaurant_id, is_favorite) {\n    is_favorite === 'true' ? is_favorite = 'false' : is_favorite = 'true';\n    fetch(`${DBHelper.DATABASE_URL}/restaurants/${restaurant_id}/?is_favorite=${is_favorite}`, {\n      method: 'PUT'\n    }).then(response => response.json()).catch(error => console.error(`Fetch Error =\\n`, error));\n  }\n\n  /**\r\n   * Map marker for a restaurant.\r\n   */\n  static mapMarkerForRestaurant(restaurant, map) {\n    const marker = new google.maps.Marker({\n      position: restaurant.latlng,\n      title: restaurant.name,\n      url: DBHelper.urlForRestaurant(restaurant),\n      map: map,\n      animation: google.maps.Animation.DROP });\n    return marker;\n  }\n\n  static removeFocusFromMap() {\n    // add title to iframe and remove focus from google map\n    window.setTimeout(() => {\n      document.querySelectorAll('#map iframe').forEach(item => {\n        item.setAttribute('title', 'Google map');\n      });\n      let map = document.getElementById('map');\n      map.querySelectorAll('button, [href], [tabindex]:not([tabindex=\"-1\"]), iframe').forEach(item => {\n        item.setAttribute('tabindex', '-1');\n      });\n    }, 1000);\n  }\n\n}\n\n//# sourceURL=webpack:///./src/js/dbhelper.js?");

/***/ })

/******/ });